#!/bin/bash

# before running ./run_analyses_using_event_weights.sh ensure that the file is given permissions to run: chmod +x run_analyses_using_event_weights.sh

# This script automates the process of running the analysis script for the SVJl signal
# ensure that calculate_event_weight.sh has been successfully run beforehand as this file is reliant on the event_weights.txt output
# event_weights.txt is used as it contains the DSID,root path, and individual event weight for each file
# this code sums DSID's event weights and computes events with this.
# sed is used to change a temporary analysis script
# ensure before analysis that all placeholder directories are replaced with real directories containing the data for analysis.

# Path to the ROOT-based analysis script (C++ code). Assuming the .C file keeps the same as in this project
analysis_script="Analysis_script.C"

# Path to the event weights file (generated by a prior script).
event_weights_file="event_weights.txt"

# Check if the event weights file exists; exit with an error if not found.
if [[ ! -f "$event_weights_file" ]]; then
    echo "Event weights file not found: $event_weights_file"
    exit 1
fi

# Check if the analysis script exists; exit with an error if not found.
if [[ ! -f "$analysis_script" ]]; then
    echo "Analysis script not found: $analysis_script"
    exit 1
fi

# Function to run the analysis script on a single ROOT file.
run_analysis() {
    local dsid=$1
    local root_file=$2
    local event_weight=$3
    local output_number=$4

    # Debug: Print function arguments to verify input.
    echo "run_analysis called with dsid=$dsid, root_file=$root_file, event_weight=$event_weight, output_number=$output_number"

    # Create a unique temporary analysis script by copying the original and replacing placeholders.
    local temp_script="temp_analysisscript_sum_evnt_weight_${dsid}_${output_number}.C"
    cp "$analysis_script" "$temp_script"

    # Replace the input ROOT file path in the temporary script.
    sed -i "s|/path/to/input/data.root|$root_file|g" "$temp_script"

    # Replace the placeholder for totalEventsWeighted with the calculated event weight.
    sed -i "s|Float_t totalEventsWeighted = 10000;|Float_t totalEventsWeighted = $event_weight;|g" "$temp_script"

    # Adjust histogram bin settings.
    declare -A histogram_bins=(
        ["HT_cutflow_"]="40, 0, 4000"
        ["MET_cutflow_"]="35, 0, 3500"
        ["RT_cutflow_"]="30, 0.0, 3.0"
        ["MT_cutflow_"]="35, 0, 3500"
        ["mjj_cutflow_"]="35, 0, 3500"
        ["mll_cutflow_"]="50, 0, 25"
        ["leading_jet_pt_cutflow_"]="15, 0, 1500"
        ["subleading_jet_pt_cutflow_"]="15, 0, 1500"
        ["MINphi_cutflow_"]="35, 0, 3.5"
        ["MAXphi_cutflow_"]="35, 0, 3.5"
        ["MAX_MINphi_cutflow_"]="35, 0, 3.5"
        ["inter_iso_cutflow_"]="10, 0, 1.0"
        ["rel_iso_cutflow_"]="10, 0, 1.0"
        ["n_muons_non_iso_cutflow_"]="10, .5, 10.5"
    )

    # Update the bin settings for each histogram in the temporary script.
    for step in 0 1 2; do
        for hist in "${!histogram_bins[@]}"; do
            sed -i "s|TH1F \*${hist}${step} = new TH1F(\"${hist}${step}\", .*, [0-9]*, [0-9]*, [0-9]*);|\
            TH1F \*${hist}${step} = new TH1F(\"${hist}${step}\", \"${hist}${step}\", ${histogram_bins[$hist]});|g" "$temp_script"
        done
    done

    # Define the output file name with the current date, DSID, and output number.
    local output_file="output_23_07_${dsid}_${output_number}.root"
    local output_path="/path/to/output_for_this_DSID/${output_file}"

    # Debug: Print the output file path for verification.
    echo "Setting output file path to: $output_path"

    # Replace the placeholder for the output file path in the temporary script.
    sed -i "s|/path/to/output/data.root|$output_path|g" "$temp_script"

    # Compile the temporary analysis script using ROOT and FastJet.
    g++ `root-config --cflags` `root-config --libs` -o temp_analysis_sum_evnt_weight "$temp_script" `fastjet-install/bin/fastjet-config --cxxflags --libs --plugins`

    # Run the compiled analysis script.
    ./temp_analysis_sum_evnt_weight

    # Clean up: remove the temporary script and executable to avoid clutter.
    rm "$temp_script" temp_analysis_sum_evnt_weight

    echo "Analysis completed successfully for DSID=$dsid"
}

# Initialize counters for output files and summed weights for each DSID.
declare -A output_number_counter
declare -A summed_weights

# Sum the event weights for each DSID across all ROOT files.
while IFS=, read -r dsid root_file event_weight; do
    # Skip the header line in the event weights file.
    if [[ "$dsid" == "DSID" ]]; then
        continue
    fi

    # Accumulate the summed weights for the current DSID.
    if [[ -z "${summed_weights[$dsid]}" ]]; then
        summed_weights[$dsid]=$event_weight
    else
        summed_weights[$dsid]=$(echo "${summed_weights[$dsid]} + $event_weight" | bc -l)
    fi
done < "$event_weights_file"

# Run the analysis for each ROOT file using the summed weights.
while IFS=, read -r dsid root_file event_weight; do
    # Skip the header line in the event weights file.
    if [[ "$dsid" == "DSID" ]]; then
        continue
    fi

    # Increment the output number counter for the current DSID.
    if [[ -z "${output_number_counter[$dsid]}" ]]; then
        output_number_counter[$dsid]=1
    else
        ((output_number_counter[$dsid]++))
    fi

    output_number="${output_number_counter[$dsid]}"
    summed_weight="${summed_weights[$dsid]}"

    # Debug: Print the root file path and the summed event weight.
    echo "Found ROOT file: $root_file"
    echo "Summed event weight for DSID $dsid: $summed_weight"

    # Run the analysis for the current ROOT file and DSID.
    run_analysis "$dsid" "$root_file" "$summed_weight" "$output_number"

done < "$event_weights_file"

echo "All analyses completed."


# When the analysis is completed ensure that all background outputs are combined into one file.
# It is recommended to use hadd:
# cd path/to/output_for_this_DSID/
# hadd -f all_background.root *.root
